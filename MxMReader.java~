import java.io.*;
import java.util.*;

/**
 *
 * @author mwillson
 * 
 * @description reads a file containing MxM (Musical Exploration Machine) output
 * , translates it, and writes it into standard LEABRA input file for Emergent.
 */
public class MxMReader {

    private static ArrayList<Note> notes = null;
    private static ArrayList<Timbre> timbres = null;
    private static int numRows = 0;
    private static Timbre currentTimbre = null;
        
    /**
     * @param args the command line arguments
     */
	
    public static void main(String[] args) throws IOException {
        Scanner s = null;
        PrintWriter out = null;
	Token current = new Token("");
        notes = new ArrayList<Note>();
        timbres = new ArrayList<Timbre>();
		
        try {

            // Scan and classify tokens
            s = new Scanner 
                    (new BufferedReader (new FileReader
                    ("gamelan.txt"))
                    );

            while ( s.hasNext() ) {
		// set text variable of token for further processing
                current.setText(s.next());
		//embody token in a class instance and assign it to a list
                classify(current);
            }

            // the number of rows for the input matrices is the total 
            // number of "notes" played
            numRows = notes.size();
            out = new PrintWriter (new FileWriter(args[0]));
            //Write out note info to file
            out.write("_D: ");
            for(int i = 0; i < notes.size(); i++) {
                out.write(notes.get(i).pitchMatrix());
                out.println();
            }
            out.println();
            
            //Write out duration info to file
            out.write("_D: ");
            for(int i = 0; i < notes.size(); i++) {
                out.write(notes.get(i).durationMatrix());
                out.println();
            }
            out.println();

            //Write out timbre info to file
	    out.write("_D: ");
            for(int i = 0; i < timbres.size(); i++) {
                out.write(timbres.get(i).timbreMatrix());
                out.println();
            }
            out.println();
	
        } finally {
            if (s != null) {
                s.close();
            }
            if (out != null) {
                out.close();
            }
        }
    }
	
    /*
     * Classify token as Note or Timbre and and if it is a note,
     * add it and the current timbre to their respective lists.
     */
    
    public static void classify (Token t) {
       
	if(t.isTimbre()) {
                currentTimbre = t.parseTimbre();
	}else if(t.isNote()) {
		notes.add(t.parseNote());
                timbres.add(currentTimbre);
	}else {
	    return;
	}
    }
    
  
}
